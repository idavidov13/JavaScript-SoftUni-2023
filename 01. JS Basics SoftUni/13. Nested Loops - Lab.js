/* 1.Часовник 
Напишете функция, която отпечатва часовете в денонощието от 0:0 до 23:59, всеки на отделен ред. Часовете трябва да се изписват във формат "{час}:{минути}". */

for (let hours = 0; hours < 24; hours++) {
  for (let min = 0; min < 60; min++) {
    let buff = "";
    if (hours < 10) {
      buff += "0" + hours;
    } else {
      buff += hours;
    }
    buff += ":";
    if (min < 10) {
      buff += "0" + min;
    } else {
      buff += min;
    }
    console.log(buff);
  }
}
function solve() {
  for (let h = 0; h <= 23; h++) {
    for (let m = 0; m <= 59; m++) {
      console.log(`${h}:${m}`);
    }
  }
}

/*2. Таблица за умножение
Отпечатайте на конзолата таблицата за умножение за числата от 1 до 10 във формат: 
"{първи множител} * {втори множител} = {резултат}". */

function solve() {
  for (let x = 1; x <= 10; x++) {
    for (let y = 1; y <= 10; y++) {
      console.log(`${x} * ${y} = ${x * y}`);
    }
  }
}
solve();

/*3. Комбинации
Напишете функция, която изчислява колко решения в естествените числа (включително и нулата) има уравнението:
x1 + x2 + x3 = n
Числото n е цяло число и се въвежда от конзолата. */

function solve(arr) {
  let num = Number(arr[0]);
  let count = 0;
  for (let x = 0; x <= num; x++) {
    for (let y = 0; y <= num; y++) {
      for (let z = 0; z <= num; z++) {
        if (x + y + z === num) {
          count++;
        }
      }
    }
  }
  console.log(count);
}
solve(["5"]);

/*4.	Сума от две числа
Напишете функция, която проверява всички възможни комбинации от двойка числа в интервала от две дадени числа. На изхода се отпечатва, коя поред е първата комбинацията, чийто сбор от числата е равен на дадено магическо число. Ако няма нито една комбинация отговаряща на условието се отпечатва съобщение, че не е намерено.
Вход
Функцията получава масив от 3 елемента:
⦁	Първи – начало на интервала – цяло число в интервала [1...999]
⦁	Втори – край на интервала – цяло число в интервала [по-голямо от първото число...1000]
⦁	Трети – магическото число – цяло число в интервала [1...10000]
Изход
На конзолата трябва да се отпечата един ред, според резултата:
⦁	При първата намерена комбинация, чиито сбор на числата е равен на магическото число:
⦁	"Combination N:{пореден номер} ({първото число} + {второ число} = {магическото число})"
⦁	Ако не е намерена комбинация отговаряща на условието:
⦁	"{броят на всички комбинации} combinations - neither equals {магическото число}"
Примерен вход и изход
Вход	Изход	Обяснения	Вход	Изход
(["1", "10", "5"])	Combination N:4 (1 + 4 = 5)	Всички комбинации  от две числа между 1 и 10 са:
1 1, 1 2, 1 3, 1 4, 1 5, ... 2 1, 2 2, ... 4 9, 4 10, 5 1 ... 10 9, 10 10
Първата комбинация, чиито сбор на числата е равен на магическото число 5 е четвъртата (1 и 4)
(["88", "888", "1000"])	Combination N:20025 (112 + 888 = 1000)
Вход	Изход	Обяснения	Вход	Изход
(["23", "24", "20"])	4 combinations - neither equals 20	Всички комбинации  от две числа между 23 и 24 са: 23 23, 23 24, 24 23, 24 24 (общо 4)
Няма двойки числа, чиито сбор е равен на магическото 20	
(["88", "888", "2000"])	641601 combinations - neither equals 2000 */

function solve(arr) {
  let firstNumber = Number(arr[0]);
  let secondNumber = Number(arr[1]);
  let magicNumber = Number(arr[2]);
  let sum = 0;
  let flag = false;
  let count = 0;
  for (let i = firstNumber; i <= secondNumber; i++) {
    for (let j = firstNumber; j <= secondNumber; j++) {
      sum = i + j;
      count++;
      if (sum === magicNumber) {
        flag = true;
        console.log(`Combination N:${count} (${i} + ${j} = ${magicNumber})`);
        break;
      }
    }
    if (flag) {
      break;
    }
  }
  if (flag === false) {
    console.log(`${count} combinations - neither equals ${magicNumber}`);
  }
}
solve(["88", "888", "2000"]);

/*5. Пътуване
Ани обича да пътува и иска тази година да посети няколко различни дестинации. Като си избере дестинация, ще прецени колко пари ще й трябват, за да отиде до там и ще започне да спестява. Когато е спестила достатъчно, ще може да пътува.
Функцията получава масив, като всеки път ще се четат първо дестинацията и минималния бюджет, който ще е нужен за пътуването. 
След това ще се четат няколко суми, които Ани спестява като работи и когато успее да събере достатъчно за пътуването, ще заминава, като на конзолата трябва да се изпише:
 "Going to {дестинацията}!" 
Когато е посетила всички дестинации, които иска, вместо дестинация ще въведе "End" и програмата ще приключи.
Примерен вход и изход
Вход	Изход	Вход	Изход
(["Greece", "1000", "200", "200", "300", "100", "150", "240", "Spain", "1200", "300", "500", "193", "423", "End"])	Going to Greece! Going to Spain!	
(["France", "2000", "300", "300", "200", "400", "190", "258", "360", "Portugal", "1450", "400", "400", "200", "300", "300", "Egypt", "1900", "1000", "280", "300", "500", "End"]) Going to France! Going to Portugal! Going to Egypt! */

function solve(arr) {
  let index = 0;
  let x = arr[index];
  index++;
  while (x !== "End") {
    let destination = x;
    let budget = Number(arr[index]);
    index++;
    let save = 0;
    while (save < budget) {
      let iteration = Number(arr[index]);
      index++;
      save += iteration;
    }
    console.log(`Going to ${destination}!`);
    x = arr[index];
    index++;
  }
}
solve()

/*5. Сграда
Напишете функция, която извежда на конзолата номерата на стаите в една сграда (в низходящ ред), като са изпълнени следните условия:
⦁	На всеки четен етаж има само офиси
⦁	На всеки нечетен етаж има само апартаменти
⦁	Всеки апартамент се означава по следния начин : А{номер на етажа}{номер на апартамента}, номерата на апартаментите започват от 0.
⦁	Всеки офис се означава по следния начин : О{номер на етажа}{номер на офиса}, номерата на офисите също започват от 0.
⦁	На последният етаж винаги има апартаменти и те са по-големи от останалите, за това пред номера им пише 'L', вместо 'А'. Ако има само един етаж, то има само големи апартаменти!
Функцията получава масив от две цели числа - броят на етажите и броят на стаите за един етаж. 
Примерен вход и изход
Вход	Изход	Обяснения
(["6", "4"])
L60 L61 L62 L63
A50 A51 A52 A53
O40 O41 O42 O43
A30 A31 A32 A33
O20 O21 O22 O23
A10 A11 A12 A13	Имаме общо 6 етажа, с по 4 стаи на етаж. Нечетните етажи имат само апартаменти, а четните само офиси.
Вход	Изход	Вход	Изход
(["9", "5"])
	L90 L91 L92 L93 L94
O80 O81 O82 O83 O84
A70 A71 A72 A73 A74
O60 O61 O62 O63 O64
A50 A51 A52 A53 A54
O40 O41 O42 O43 O44
A30 A31 A32 A33 A34
O20 O21 O22 O23 O24
A10 A11 A12 A13 A14	(["4", "4"])	L40 L41 L42 L43
A30 A31 A32 A33
O20 O21 O22 O23
A10 A11 A12 A13  */

function solve(arr) {
  let floors = Number(arr[0]);
  let places = Number(arr[1]);

  for (let i = floors; i > 0; i--) {
    let buff = "";
    for (let j = 0; j < places; j++) {
      if (i === floors) {
        buff += "L" + i + j + " ";
      } else if (i % 2 === 0) {
        buff += "O" + i + j + " ";
      } else if (i % 2 === 1) {
        buff += "A" + i + j + " ";
      }
    }
    console.log(buff);
  }
}
solve(["6", "4"]);
